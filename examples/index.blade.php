@extends('_layouts.docs')

@section('breadcrumb', 'Examples')
@section('sidebar:examples:class', 'active')

@section('content')
  
  <h2 class="ui header"></h2>
  
  <div class="ui tertiary segment">
    Examples try to show usage in the most obvious way so won't necessarily follow best practices
  </div>
  <h2 class="ui dividing header">Angular</h2>
  
  <p>
    An example Angular (1.x) integration with <em>EloquentJs</em> can be found
    at: <a href="https://github.com/parsnick/eloquentjs-example-angular">parsnick/eloquentjs-example-angular</a>.
  </p>
  
  <p>
    The set up steps can be seen in the commit history, and <a
      href="https://github.com/parsnick/eloquentjs-example-angular/blob/master/resources/views/welcome.php">resources/views/welcome.php</a> 
    contains the Angular specific javascript. The <code>public/eloquent.js</code> file that appears in <a
      href="https://github.com/parsnick/eloquentjs-example-angular/commit/81cd56c6413e3d4c5a4f18db7fbedf498203c4a4">81cd56c</a>
    is generated by running <code class="terminal">php artisan eloquentjs:generate</code>.
  </p>
  
  <p>
    Since <em>EloquentJs</em> returns native (or polyfilled) promises, you can easily inject query results
    via the <code>resolve</code> property when defining routes. The controller then receives the value of 
    the resolved promise - i.e. the query result - as shown on <a
      href="https://github.com/parsnick/eloquentjs-example-angular/blob/master/resources/views/welcome.php#L34">resources/views/welcome.php:34</a>.
  </p>
  
  <h2 class="ui dividing header">More to come&hellip;</h2>
  
  <p>
    Submit an issue (or even better, a pull request) if there's anything else you'd like to see here.
  </p>
  
@stop
